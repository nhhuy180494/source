
@{
    ViewBag.Title = Resources.Langues.Itemmanagement;
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}


@section styles{
    <link href="@Url.Content("~/Content/KendoGrid.css")" rel="stylesheet" type="text/css" />

    <style>
        .k-grid .k-state-selected {
            background-color: #66ccff;
            color: black;
        }

        .k-grid td.k-state-selected:hover, .k-grid tr.k-state-selected:hover td {
            background-color: #66ccff;
        }

        input[type="checkbox"][readonly] {
            pointer-events: none;
        }

        .displayItemlCode {
            font-size: 20px;
        }

        #showAddEntity {
            float: right;
        }

        #addEntity {
            float: right;
        }

        .k-state-disabled {
            pointer-events: none;
        }

        #ItemMapGrid .decrease, .increase, .orderNumber {
            cursor: pointer;
            color: black;
        }
    </style>

}

<h2>@ViewBag.Title</h2>

<div class="container-fluid adminSiteContent">
    <div class="form-group">
        <div class="col-md-12 col-lg-6">
            <div class="form-group">
                @(Html.Kendo().Grid<DPDSP.Models.ItemViewModel>()
    .Name("ItemGrid")
    .Columns(columns =>
    {
        columns.Bound(item => item.ItemName).HtmlAttributes(new { style = "text-align:center;"}).Title(Resources.Langues.ItemName + "(ko)");
        columns.Bound(item => item.ItemName2).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.ItemName + "(en)");
        columns.Bound(item => item.ItemCode).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.ItemCode);
        columns.Bound(item => item.Status).ClientTemplate("<input type=\"checkbox\" readonly  #=Status ? checked='checked' :  '' # />")
        .HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.Status);
        columns.Command(command =>
        {
            command.Edit().Text(Resources.Langues.Edit).UpdateText(Resources.Langues.Update).CancelText(Resources.Langues.Cancel);
            command.Custom(Resources.Langues.Delete).Click("DeleteItem");
        }).Title(Resources.Langues.Management).HtmlAttributes(new { style = "text-align:center;" });
    })
    .ToolBar(toolbar => toolbar.Create().Text(Resources.Langues.AddNewRecord))
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:650px;" })
    .Selectable(selectable => selectable
          .Mode(GridSelectionMode.Multiple)
          .Type(GridSelectionType.Row))
    .Events(ev =>
    {
        ev.Change("onChange");
        ev.Edit("onEdit");
        ev.DataBound("onDataBound");
    })
    //.PersistSelection(true)
    //.Navigatable()
    .Resizable(rz => rz.Columns(true))
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events => events.Error("error_handler").Sync("sync_handler"))
        .Model(item => { item.Id(p => p.ItemCode); })
    .Read(read => read.Action("EditingInline_ReadItem", "ItemManagement"))
    .Create(update => update.Action("EditingInline_CreateItem", "ItemManagement"))
       .Update(update => update.Action("EditingInline_UpdateItem", "ItemManagement"))
    //.Destroy(update => update.Action("EditingInline_DestroyModel", "ModelManagement"))
    )
                )
            </div>
        </div>
        <div class="col-md-12 col-lg-6">
            <div class="form-inline" style="padding:20px;">
                <label class="form-group displayItemlCode">@Resources.Langues.ItemSelection</label>
                <p class="form-group displayItemlCode" id="ItemSelected"></p>
            </div>
            <div class="row">
                @(Html.Kendo().Grid<DPDSP.Models.ItemMapEntityViewModel>()
.Name("ItemMapGrid")
.Columns(columns =>
{
    columns.Bound(item => item.OrderNumber).ClientTemplate("<div class=\"btn-group\"><a class=\"orderNumber\">#=OrderNumber  #</a> <a class=\"decrease\"><span class=\"glyphicon glyphicon-triangle-top\"></a> <a class=\"increase\"><span class=\"glyphicon glyphicon-triangle-bottom\"></a></div>").HtmlAttributes(new { style = "text-align:center;" });
    columns.Bound(entity => entity.EntityName).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.EntityName + "(ko)");
    columns.Bound(entity => entity.EntityName2).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.EntityName + "(en)");
    columns.Bound(entity => entity.EntityCode).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.EntityCode);
    columns.Bound(entity => entity.Status).ClientTemplate("<input type=\"checkbox\" readonly  #=Status ? checked='checked' :  '' # />")
    .HtmlAttributes(new
    {
        style = "text-align:center;"
    }).Title(Resources.Langues.Status);
    columns.Command(command =>
    {
        command.Custom(Resources.Langues.Delete).Click("DeleteItemMap").HtmlAttributes(new { @class = "btn-danger" });
    }).Title(Resources.Langues.Management).HtmlAttributes(new { style = "text-align:center;" });
})
.ToolBar(toolbar =>
{
    toolbar.Custom().Text(Resources.Langues.AddNewRecord).HtmlAttributes(new { id = "showAddEntity", style = "margin-right:10px;" });
})
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Pageable()
.Sortable()
.Scrollable()
.HtmlAttributes(new { style = "height:600px;" })
    //.Selectable(selectable => selectable
    //      .Mode(GridSelectionMode.Multiple)
    //      .Type(GridSelectionType.Row))
    //.Events(ev => ev.Change("onChange"))
    //.PersistSelection(true)
    //.Navigatable()
    .Resizable(rz => rz.Columns(true))
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Events(events => events.Error("error_handler").Sync("sync_handler"))
                .Model(entity => { entity.Id(p => p.EntityCode); })
                .Read(read => read.Action("ReadItemMap", "ItemManagement").Data("dataItemCode"))
                //.Destroy(update => update.Action("DestroyModelMap", "ModelManagement"))
                )
                )
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal" style="overflow-y:scroll;" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    @(Html.Kendo().Grid<DPDSP.Models.EntityViewModel>()
.Name("EntityGrid")
.Columns(columns =>
{
    columns.Bound(entity => entity.Selection).ClientTemplate("<input type=\"checkbox\" #=Selection ? checked='checked' :  '' # class=\"chkbox\" id=\"#=EntityCode#\" /> ")
    .HtmlAttributes(new { style = "text-align:center;" });
    columns.Bound(entity => entity.EntityName).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.EntityName + "(ko)");
    columns.Bound(entity => entity.EntityName2).HtmlAttributes(new { style = "text-align:center;" }).Title(Resources.Langues.EntityName + "(en)");
    columns.Bound(entity => entity.EntityCode).HtmlAttributes(new { style = "text-align:center;" }).Width(150).Title(Resources.Langues.EntityCode);
    columns.Bound(entity => entity.Status).ClientTemplate("<input type=\"checkbox\" readonly  #=Status ? checked='checked' :  '' # />")
    .HtmlAttributes(new
    {
        style = "text-align:center;"
    }).Width(120).Title(Resources.Langues.Status);
})
.ToolBar(toolbar =>
{
//toolbar.Custom().Text("Add Item").HtmlAttributes(new { id = "addItem", @class = "k-state-disabled" });
                        @*toolbar.Template(@<text>
                                                <div class="row">
                                                    <button class="btn btn-default k-state-disabled" id="addItem" type="button">Add Item</button>
                                                </div>
                            </text>);*@
                    toolbar.Template(@<text>
                        <div class="toolbar">
                            <div class="row">
                                <div class="col-md-5">
                                    <div class="input-group">
                                        <span class="input-group-addon btn-opal"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></span>
                                        <input type="text" class="form-control boder-opal" id='itemFilter' placeholder="Enter EntityName...">
                                        <span class="input-group-btn">
                                            <button class="btn btn-default btn-opal" id="resetEnityGrid" type="button"><span class="glyphicon glyphicon-refresh" aria-hidden="true"></span></button>
                                        </span>
                                    </div>
                                </div>
                                <div class="co-md-3">
                                    <button style="margin-right:10px;" class="btn btn-default k-state-disabled" id="addEntity" type="button">@Resources.Langues.AddNewRecord</button>
                                </div>
                            </div>
                        </div>
                    </text>);
})
//.Events(ev =>
//{
//    ev.DataBound("onEntityGridDataBound");
//})
//.Editable(editable => editable.Mode(GridEditMode.InLine))
.Pageable()
.Sortable()
.Scrollable()
.HtmlAttributes(new { style = "height:550px;" })
    //.Selectable(selectable => selectable
    //      .Mode(GridSelectionMode.Multiple)
    //      .Type(GridSelectionType.Row))
    //.Events(ev => ev.Change("onChange"))
    //.PersistSelection(true)
    //.Navigatable()
    .Resizable(rz => rz.Columns(true))
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Events(events => events.Error("error_handler").Sync("sync_handler"))
                .Model(entity => { entity.Id(p => p.EntityCode); })
                .Read(read => read.Action("ReadEnity", "ItemManagement").Data("dataItemCode"))
                //.Destroy(update => update.Action("DestroyModelMap", "ModelManagement"))
                )
                    )
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">

        $(document).ready(function () {
            var itemGrid = $("#ItemGrid").data("kendoGrid");
            var itemMapGrid = $("#ItemMapGrid").data("kendoGrid");
            var entityGrid = $('#EntityGrid').data('kendoGrid');
            var checkedEntitys = [];

            $('#ItemMapGrid').on('click', '.increase', function (e) {
                var row = $(this).closest('tr');
                var dataItem = itemMapGrid.dataItem(row);
                var itemCode = $('#ItemSelected').text();
                var orderNumber = dataItem.OrderNumber;
                $.blockUI();
                $.post('@Url.Action("IncreaseOrderNumber", "ItemManagement")', { itemCode: itemCode, orderNumber: orderNumber },
                function (result) {
                    if (result) {
                        itemMapGrid.dataSource.read({ itemCode: itemCode });
                    }
                }).fail(function () {
                    bootbox.alert('@Resources.Langues.ContactAdmin');
                }).always(function () {
                    $.unblockUI();
                })
            });

            $('#ItemMapGrid').on('click', '.decrease', function (e) {
                var row = $(this).closest('tr');
                var dataItem = itemMapGrid.dataItem(row);
                var itemCode = $('#ItemSelected').text();
                var orderNumber = dataItem.OrderNumber;
                $.blockUI();
                $.post('@Url.Action("DecreaseOrderNumber", "ItemManagement")', { itemCode: itemCode, orderNumber: orderNumber },
                function (result) {
                    if (result) {
                        itemMapGrid.dataSource.read({ itemCode: itemCode });
                    }
                }).fail(function () {
                    bootbox.alert('@Resources.Langues.ContactAdmin');
                }).always(function () {
                    $.unblockUI();
                })
            });

            $("#showAddEntity").click(function (e) {
                e.preventDefault();
                //alert("xxx");
                var itemCode = $('#ItemSelected').text();
                //console.log(itemCode);
                if (itemCode == "") {
                    bootbox.alert('@Resources.Langues.SelectModelToAddItem');
                } else {
                    //$.blockUI();
                    $("#myModal").modal("show");
                    entityGrid.dataSource.read({ itemCode: itemCode });
                }
            });

            $('#myModal').on('hidden.bs.modal', function () {
                // do something…
                checkedEntitys = [];
                $('#itemFilter').val('');
                entityGrid.dataSource.filter({});
                $('#addEntity').addClass('k-state-disabled');
                $.unblockUI();
            });

            $('#addEntity').click(function (e) {
                e.preventDefault();
                var itemCode = $("#ItemSelected").text();
                $.blockUI();
                $.post('@Url.Action("AddItemMap", "ItemManagement")', { listEntityCode: checkedEntitys, itemCode: itemCode },
                function (result) {
                    if (result) {
                        itemMapGrid.dataSource.read({ itemCode: itemCode });
                        checkedEntitys = [];
                        closeModal();
                    }
                }).fail(function () {
                    bootbox.alert('@Resources.Langues.ContactAdmin');
                }).always(function () {
                    $.unblockUI();
                })
            });

            entityGrid.table.on('click', '.chkbox', function (e) {
                var checked = this.checked,
                row = $(this).closest("tr")
                var entityCode = $(this).attr('id');
                
                if (checked) {
                    //-select the row
                    row.addClass("k-state-selected");
                    checkedEntitys.push(entityCode);
                } else {
                    //-remove selection
                    row.removeClass("k-state-selected");
                    var index = checkedEntitys.indexOf(entityCode);
                    checkedEntitys.splice(index, 1);
                }

                if (checkedEntitys.length > 0) {
                    $('#addEntity').removeClass('k-state-disabled');
                } else {
                    $('#addEntity').addClass('k-state-disabled');
                }
                //console.log(checkedEntitys);
            });

            $("#itemFilter").keyup(function () {
                var value = $("#itemFilter").val();
                //itemGrid = $("#ItemGrid").data("kendoGrid");
                if (value) {
                    entityGrid.dataSource.filter({ field: "EntityName", operator: "contains", value: value });
                } else {
                    entityGrid.dataSource.filter({});
                }
            });

            $('#resetEnityGrid').click(function () {
                $('#itemFilter').val('');
                entityGrid.dataSource.filter({});
            });

            function callback(e) {
                // PLACE CALLBACK CODE HERE
                onEntityGridDataBound(entityGrid, checkedEntitys);
            }

            entityGrid.dataSource.bind("change", callback);
            entityGrid.dataSource.fetch();
        })

        function onEntityGridDataBound(entityGrid, checkedEntitys) {
            if (entityGrid != null && checkedEntitys != null) {
                for (var i = 0; i < checkedEntitys.length; i++) {
                    var checkbox = entityGrid.table.find('input[type="checkbox"][id=' + checkedEntitys[i] + ']');
                    checkbox.prop('checked', 'checked')
                    var row = checkbox.closest("tr[role=row]");
                    row.addClass('k-state-selected');
                }
            }
        }

        function closeModal() {
            $('#myModal').modal("hide");
            $.unblockUI();
        }

        function DeleteItemMap(e) {
            var itemMapGrid = $("#ItemMapGrid").data("kendoGrid");
            var dataItem = itemMapGrid.dataItem($(e.currentTarget).closest("tr"));
            var itemCode = $("#ItemSelected").text();
            bootbox.confirm({
                message: '@Resources.Langues.AreYouSure',
                buttons: {
                    cancel: {
                        label: '@Resources.Langues.No',
                    }, confirm: {
                        label: '@Resources.Langues.Yes',
                        className: 'btn-success'
                    }
                },
                callback: function (callback) {
                    if (callback) {
                        $.blockUI();
                        $.post('@Url.Action("DestroyItemMap", "ItemManagement")', { itemCode: itemCode, entityCode: dataItem.EntityCode },
                        function (result) {
                            //console.log(result);
                            if (result) {
                                itemMapGrid.dataSource.read({ itemCode: itemCode });
                            }
                        }).fail(function () {
                            bootbox.alert('@Resources.Langues.ContactAdmin');
                        }).always(function () {
                            $.unblockUI();
                        })
                    }
                }
            });
        }

        function dataItemCode() {
            var itemCode = $("#ItemSelected").text();
            return {
                itemCode: itemCode
            };
        }

        function DeleteItem(e) {
            var itemGrid = $("#ItemGrid").data("kendoGrid");
            var itemMapGrid = $("#ItemMapGrid").data("kendoGrid");
            var dataItem = itemGrid.dataItem($(e.currentTarget).closest("tr"));
            bootbox.confirm({
                message: '@Resources.Langues.AreYouSure',
                buttons: {
                    cancel: {
                        label: '@Resources.Langues.No',
                    }, confirm: {
                        label: '@Resources.Langues.Yes',
                        className: 'btn-success'
                    }
                },
                callback: function (callback) {
                    if (callback) {
                        $.blockUI();
                        $.post('@Url.Action("EditingInline_DestroyItem", "ItemManagement")', { itemCode: dataItem.ItemCode },
                        function (result) {
                            if (result) {
                                itemGrid.dataSource.read();
                                itemMapGrid.dataSource.read(dataItemCode());
                            }
                        }).fail(function () {
                            bootbox.alert('@Resources.Langues.ContactAdmin');
                        }).always(function () {
                            $.unblockUI();
                        })
                    }
                }
            });
        }

        function onEdit(e) {
            if (e.model.isNew() == false) {
                $(e.container).find('input[name=ItemCode]').prop("readonly", true);
            }
        }

        function onDataBound(e) {
            var itemGrid = $("#ItemGrid").data("kendoGrid");
            var row = itemGrid.tbody.find("tr[role='row']:first");
            if (row != null) {
                itemGrid.select(e.sender.tbody.find("tr:first"));
            }
        }

        function onChange(e) {
            var itemGrid = $("#ItemGrid").data("kendoGrid");
            var itemMapGrid = $("#ItemMapGrid").data("kendoGrid");
            var itemSelected = itemGrid.dataItem(itemGrid.select());
            var itemCode = itemSelected.ItemCode;
            $('#ItemSelected').text(itemCode);
            itemMapGrid.dataSource.read({ itemCode: itemCode });
        }

        //show server errors if any
        function error_handler(e) {
            if (e.errors) {
                var message = '@Resources.Langues.Error: ';
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                             message += this + "\n";
                        });
                    }
                });
                bootbox.alert(message);
            }
        }

        function sync_handler(e) {
            this.read();
        }
    </script>
}